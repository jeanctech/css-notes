/** Position in CSS */

/* The `position` property in CSS is used to control the position of an HTML element in a
Web page. You can adjust the position of an element relative to its container or relative to
with other elements on the page. The `position` property can take several values that determine
how the element is positioned. The most common values are: */

/* 1. **`static` (default value):** This value places the element in its default position
in the normal flow of the page. The `top`, `right`, `bottom` and `left` properties have no
effect on elements with `position: static`. */

div {
  position: static;
}

/* 2. **`relative`:** With `position: relative`, you can adjust the position of an element relative to
with its original position in the normal flow of the page. You can use the `top`, `right`,
`bottom` and `left` to move the element from its original position. */

div {
  position: relative;
  top: 20px;
  left: 10px;
}

/* 3. **`absolute`:** Elements with `position: absolute` are positioned relative to their element
nearest container that has a position other than `static`. You can use the `top` properties,
`right`, `bottom` and `left` to specify the exact position of the element relative to its
container. */

div {
  position: absolute;
  top: 50px;
  left: 100px;
}

/* 4. **`fixed`:** Elements with `position: fixed` are positioned relative to the window of the
 browser and remain in place even when the page is scrolled. It is useful for creating elements
 that follow the user while browsing the page. */

div {
  position: fixed;
  top: 0;
  right: 0;
}

/* 5. **`sticky`:** Elements with `position: sticky` behave like `relative` until the
user scrolls and the element reaches a specific location in the window. At that moment,
becomes `fixed` and stays in that position while scrolling. */

div {
  position: sticky;
  top: 20px;
}

/* The `position` property is essential for web design and allows you to control the layout and
interaction of elements on a page. You can use it to create complex designs and effects
displacement, among others. Choosing the value of `position` depends on your needs.
layout and how you want an element to behave in relation to other elements and the window of the
browser. */
