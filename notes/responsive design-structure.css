/** Responsive Design Structure in CSS */

/* To implement a responsive web design in CSS in a structured and effective way, it is essential
organize your code appropriately. Here I present a basic structure that you can follow.
Please note that this structure may vary depending on your specific needs and the project
in question. */

/* Global styles that do not depend on the screen size */
body {
  font-family: Arial, sans-serif;
  background-color: #f1f1f1;
  margin: 0;
  padding: 0;
}

/* Header styles */
header {
  background-color: #333;
  color: #fff;
  padding: 20px;
}

/* Styles for navigation */
nav {
  display: flex;
  justify-content: center;
}

nav a {
  text-decoration: none;
  color: #fff;
  margin: 0 10px;
}

/* Styles for main content */
.main-content {
  max-width: 1200px;
  margin: 0 self;
  padding: 20px;
}

/* Styles for columns (using Flexbox) */
.column {
  flex: 1;
  margin: 10px;
}

/* Styles for footers (footer) */
footer {
  background-color: #333;
  color: #fff;
  text-align: center;
  padding: 10px;
}

/* Media queries for smaller devices */
@media (max-width: 768px) {
  header {
    font-size: 24px;
  }

  .column {
    flex-basis: 100%;
  }
}

/* This basic CSS structure is organized into sections that correspond to common parts of a website,
such as the header, navigation, main content, columns and footer. Half are used
queries to adjust the styles when the screen width is less than 768px, which represents
smaller devices such as tablets and mobile phones. */

/* Remember that the structure of your CSS may vary depending on the complexity of your site and the elements
specific things you need to style. It is also important to use class names and labels
meaningful semantics to facilitate maintenance and understanding of the code. */

/* Additionally, it is common to divide HTML into sections with semantic tags such as `<header>`, `<nav>`,
`<main>`, `<section>`, and `<footer>` to improve accessibility and facilitate implementation of the
responsive design. */
